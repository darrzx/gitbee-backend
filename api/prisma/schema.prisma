// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id                  Int                @id @default(autoincrement())
  lecturer_id         String             @db.VarChar(50)
  student_leader_id   String             @db.VarChar(50)
  is_disable          Int
  created_at          DateTime           @default(now())
  projectDetail       ProjectDetail? 
  assessment          Assessment? 
  reviewedProject     ReviewedProject? 
  outstandingProject  OutstandingProject?
  projectGroups       ProjectGroup[]
  galleries           Gallery[]
  projectTechnologies ProjectTechnology[]

  @@map("project")
}

model ProjectDetail {
  id                Int             @id @default(autoincrement())
  project_id        Int             @unique
  title             String          @db.VarChar(255)
  semester_id       String          @db.VarChar(100)
  course_id         String          @db.VarChar(50)
  class             String          @db.VarChar(20)
  github_link       String          @db.Text
  project_link      String          @db.Text
  documentation     String          @db.MediumText
  description       String          @db.Text
  thumbnail         String          @db.MediumText
  status_id         Int
  category_id       Int
  major_id          Int
  group             Int
  project           Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)
  status            Status          @relation(fields: [status_id], references: [id], onDelete: Cascade)
  category          Category        @relation(fields: [category_id], references: [id], onDelete: Cascade)
  major             Major           @relation(fields: [major_id], references: [id], onDelete: Cascade)

  @@map("project_detail")
}

model Assessment {
  id                Int             @id @default(autoincrement())
  project_id        Int             @unique
  grade             Int         
  reason            String          @db.Text
  created_at        DateTime        @default(now())
  project           Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("assessment")
}

model ReviewedProject {
  id                Int             @id @default(autoincrement())
  project_id        Int             @unique
  is_recommended    Int         
  feedback          String          @db.Text
  created_at        DateTime        @default(now())
  project           Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("reviewed_project")
}

model OutstandingProject {
  id                Int             @id @default(autoincrement())
  project_id        Int             @unique
  is_outstanding    Int         
  feedback          String          @db.Text
  created_at        DateTime        @default(now())
  project           Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("outstanding_project")
}

model ProjectGroup {
  id                    Int             @id @default(autoincrement())
  project_id            Int     
  student_id            String          @db.VarChar(50)
  student_name          String          @db.VarChar(200)
  student_binusian_id   String          @db.VarChar(150)
  project               Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("project_group")
}

model Gallery {
  id                Int             @id @default(autoincrement())
  project_id        Int     
  image             String          @db.MediumText
  project           Project         @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("gallery")
}

model Status {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(50)
  projectDetails    ProjectDetail[] 

  @@map("status")
}

model Category {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(100)
  projectDetails    ProjectDetail[] 

  @@map("category")
}

model Technology {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(100)
  projectTechnologies  ProjectTechnology[]

  @@map("technology")
}

model ProjectTechnology {
  id            Int         @id @default(autoincrement())
  project_id    Int
  technology_id Int
  project       Project     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  technology    Technology  @relation(fields: [technology_id], references: [id], onDelete: Cascade)

  @@unique([project_id, technology_id])
  @@map("project_technology")
}

model Major {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(100)
  projectDetails    ProjectDetail[] 

  @@map("major")
}

model TemporaryGroup {
  id                    Int             @id @default(autoincrement())
  semester_id           String          @db.VarChar(100)
  course_id             String          @db.VarChar(50)
  class                 String          @db.VarChar(20)
  group                 Int             
  student_id            String          @db.VarChar(50)
  student_name          String          @db.VarChar(200)
  student_binusian_id   String          @db.VarChar(150)

  @@map("temporary_group")
}

model Class {
  id                    Int             @id @default(autoincrement())
  semester_id           String          @db.VarChar(100)
  course_id             String          @db.VarChar(50)
  class                 String          @db.VarChar(20)
  lecturer_id           String          @db.VarChar(50)
  finalized_at          DateTime        @default(now())

  @@map("class")
}